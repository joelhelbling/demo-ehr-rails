require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PrescriptionsController, :type => :controller do


  # This should return the minimal set of attributes required to create a valid
  # Prescription. As you add validations to Prescription, be sure to
  # adjust the attributes here as well.
  let(:patient) { 
    Patient.create!({:first_name => 'Mark', :last_name=>'Harris', :date_of_birth=>'10/11/1971', :state=>'OH' }) 
  }

  let(:valid_attributes) {
    {
      :drug_number=>'98033',
      :drug_name =>'Nexium',
      :quantity => '10',
      :frequency => 'qD',
      :refills => '3',
      :dispense_as_written => true,
      :formulary_status => 'On Formulary',
      :patient_id => patient.id
    }
  }

  let(:invalid_attributes) {
    {
      :drug_number=>'ABCDEF',
      :drug_name =>'12345',
      :quantity => '100000',
      :frequency => 'xf',
      :refills => '-1',
      :dispense_as_written => true,
      :formulary_status => 'Ouch!'
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PrescriptionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all prescriptions as @prescriptions", :wip => true do
#      @patient = Patient.create! :first_name=>'Mark', :last_name=>'Harris', :date_of_birth=>'10/11/1971', :state=>'OH'
      prescription = Prescription.create! valid_attributes
      get :index, {:patient_id=>patient.id, :patient_id => patient.id }, valid_session
      expect(assigns(:prescriptions)).to eq([prescription])
    end
  end

  describe "GET show" do
    it "assigns the requested prescription as @prescription" do
      prescription = Prescription.create! valid_attributes
      get :show, {:id => prescription.to_param, :patient_id => patient.id }, valid_session
      expect(assigns(:prescription)).to eq(prescription)
    end
  end

  describe "GET new" do
    it "assigns a new prescription as @prescription" do
      get :new, {:patient_id=>patient.id}, valid_session
      expect(assigns(:prescription)).to be_a_new(Prescription)
    end
  end

  describe "GET edit" do
    it "assigns the requested prescription as @prescription" do
      prescription = Prescription.create! valid_attributes
      get :edit, {:id => prescription.to_param, :patient_id=> patient.id}, valid_session
      expect(assigns(:prescription)).to eq(prescription)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Prescription" do
        expect {
          post :create, {:prescription => valid_attributes, :patient_id => patient.id }, valid_session
        }.to change(Prescription, :count).by(1)
      end

      it "assigns a newly created prescription as @prescription" do
        post :create, {:prescription => valid_attributes, :patient_id => patient.id }, valid_session
        expect(assigns(:prescription)).to be_a(Prescription)
        expect(assigns(:prescription)).to be_persisted
      end

      it "redirects to the patient with prescription listing" do
        post :create, {:prescription => valid_attributes, :patient_id => patient.id }, valid_session
        expect(response).to redirect_to(patient)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved prescription as @prescription" do
        post :create, {:prescription => invalid_attributes, :patient_id => patient.id }, valid_session
        expect(assigns(:prescription)).to be_a_new(Prescription)
      end

      it "re-renders the 'new' template" do
        post :create, {:prescription => invalid_attributes, :patient_id => patient.id }, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {
          :drug_number=>'980124',
          :drug_name =>'Teliurium',
          :quantity => '10',
          :frequency => 'qD',
          :refills => '3',
          :dispense_as_written => true,
          :formulary_status => 'On Formulary',
          :patient_id => patient.id
        }
      }

      it "updates the requested prescription" do
        prescription = Prescription.create! valid_attributes
        put :update, {:id => prescription.to_param, :prescription => new_attributes, :patient_id => patient.id }, valid_session
        prescription.reload
        expect(prescription.drug_name).to eql('Teliurium')
        expect(prescription.drug_number).to eql('980124')
      end

      it "assigns the requested prescription as @prescription" do
        prescription = Prescription.create! valid_attributes
        put :update, {:id => prescription.to_param, :prescription => valid_attributes, :patient_id => patient.id }, valid_session
        expect(assigns(:prescription)).to eq(prescription)
      end

      it "redirects to the prescription" do
        prescription = Prescription.create! valid_attributes
        put :update, {:id => prescription.to_param, :prescription => valid_attributes, :patient_id => patient.id }, valid_session
        expect(response).to redirect_to(patient)
      end
    end

    describe "with invalid params" do
      it "assigns the prescription as @prescription" do
        prescription = Prescription.create! valid_attributes
        put :update, {:id => prescription.to_param, :prescription => invalid_attributes, :patient_id => patient.id }, valid_session
        expect(assigns(:prescription)).to eq(prescription)
      end

      it "re-renders the 'edit' template" do
        prescription = Prescription.create! valid_attributes
        put :update, {:id => prescription.to_param, :prescription => invalid_attributes, :patient_id=>patient.id}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested prescription" do
      prescription = Prescription.create! valid_attributes
      expect {
        delete :destroy, {:id => prescription.to_param, :patient_id=>patient.id}, valid_session
      }.to change(Prescription, :count).by(-1)
    end

    it "redirects to the prescriptions list" do
      prescription = Prescription.create! valid_attributes
      delete :destroy, {:id => prescription.to_param, :patient_id=>patient.id}, valid_session
      expect(response).to redirect_to(patient_prescriptions_url(patient))
    end
  end

end
